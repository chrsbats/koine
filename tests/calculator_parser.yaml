start_rule: program

rules:
  program:
    sequence:
      - { rule: expression }
      - zero_or_more:
          sequence:
            - { rule: separator }
            - { rule: expression }
      - { rule: trailing_whitespace }

  expression:
    ast: { structure: "left_associative_op" }
    sequence:
      - { rule: term }
      - zero_or_more:
          sequence: [{rule: _}, {rule: add_op}, {rule: _}, {rule: term}]

  term:
    ast: { structure: "left_associative_op" }
    sequence:
      - { rule: power }
      - zero_or_more:
          sequence: [{rule: _}, {rule: mul_op}, {rule: _}, {rule: power}]

  power:
    ast: { structure: "right_associative_op" }
    sequence:
      - { rule: factor }
      - optional:
          sequence:
            - { rule: _ }
            - { rule: power_op }
            - { rule: _ }
            - { rule: power }

  factor:
    ast: { promote: true }
    choice:
      - { rule: number }
      - sequence:
          - { literal: "(" }
          - { rule: _ }
          - { rule: expression }
          - { rule: _ }
          - { rule: rparen }

  add_op:
    ast: { promote: true }
    choice:
      - { literal: "+", ast: { tag: "add_op" } }
      - { literal: "-", ast: { tag: "add_op" } }

  mul_op:
    ast: { promote: true }
    choice:
      - { literal: "*", ast: { tag: "mul_op" } }
      - { literal: "/", ast: { tag: "mul_op" } }

  power_op:
    ast: { leaf: true, tag: "power_op" }
    literal: "^"

  rparen:
    ast: { discard: true }
    choice:
      - { literal: ")" }

  number:
    ast: { leaf: true, type: "number" }
    regex: "-?\\d+"

  separator:
    ast: { discard: true }
    regex: "[ \\t]*\\n[\\s]*"
  
  _:
    ast: { discard: true }
    regex: "[ \\t]*"

  trailing_whitespace:
    ast: { discard: true }
    regex: "\\s*"
